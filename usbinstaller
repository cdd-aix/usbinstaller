#!/bin/bash -eu
# set -x
PATH="/usr/sbin:/usr/bin:/sbin:/bin"
cleanup_dirs=()
cleanup_devs=()
zero="$(readlink -f "$0")"
zero_dir="${zero%/*}"
exec 3>&1
USBInstaller() {
    local block_device="$1" mountpoint
    cleanup_devs+=("$block_device")
    UnmountBlockDeviceFilesystems "$block_device"
    mountpoint=$(MakeBootableBlockDevice "$block_device")
    cleanup_dirs+=("$mountpoint")
    DumpUbuntuOntoDevice "$mountpoint"
    exit 0
}

UnmountBlockDeviceFilesystems() {
    local block_device="$1" mountpoint
    lsblk --noheadings --output MOUNTPOINT "$block_device" |
	while read -r mountpoint; do
	    if [ -n "$mountpoint" ]; then
		umount -f "$mountpoint"
	    fi
	done
}

MakeBootableBlockDevice() {
    local block_device="$1" block_device_partition="${1}1" wait
    parted -a optimal "$block_device" mklabel msdos 1>&3
    parted -a optimal "$block_device" -- mkpart primary fat32 1M -1M 1>&3
    for wait in 1 2 3 4 5; do
	[ -r "$block_device_partition" ] && break
	: echo "$wait"
	sleep 1
    done
    mkfs.fat -F 32 "$block_device_partition" 1>&3
    local uuid
    uuid=$(lsblk --noheadings --output UUID "$block_device_partition")
    local mountpoint="/media/$uuid"
    mkdir -p "$mountpoint"
    mount "$block_device_partition" "$mountpoint"
    local boot="$mountpoint/boot" efi="$mountpoint/EFI"
    mkdir -p "$mountpoint/EFI"
    grub-install --no-floppy --boot-directory="$boot" --target=i386-pc "$block_device"
    grub-install --removable --boot-directory="$boot" --efi-directory="$efi" --target=x86_64-efi "$block_device"
    grub-install --removable --boot-directory="$boot" --efi-directory="$efi" --target=i386-efi "$block_device"
    echo "$mountpoint"
}

DumpUbuntuOntoDevice() {
    local mountpoint="$1" ubuntu_file
    ubuntu_file=$(FetchISO 'http://releases.ubuntu.com/18.04/ubuntu-18.04.1-desktop-amd64.iso')
    7z x -o"$mountpoint" -aoa "$ubuntu_file"
}

FetchISO() {
    local url="$1" sha_url="${1%/*}/SHA256SUMS" file="${1##*/}" sha_file="$zero_dir/SHA256SUMS"
    local full_file="$zero_dir/$file"
    curl --location --silent --show-error "$sha_url" | fgrep "$file" > "$sha_file"
    if ! (cd "$zero_dir"; sha256sum --quiet --check "$sha_file"); then
	rm -vf "$full_file"
	curl --location --output "$full_file" "$url"
	(cd "$zero_dir"; sha256sum --quiet --check "$sha_file")
    fi
    echo "$full_file"
}

Cleanup() {
    set +e -x
    local dev dir
    for dev in "${cleanup_devs[@]}"; do
	UnmountBlockDeviceFilesystems "$dev"
    done

    for dir in "${cleanup_dirs[@]}"; do
	rmdir "$dir"
    done
}

trap "Cleanup" EXIT
USBInstaller "$@"
