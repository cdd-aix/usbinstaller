#!/bin/bash -eu
set -x
set -o pipefail
PATH="/usr/sbin:/usr/bin:/sbin:/bin"
cleanup_dirs=()
cleanup_devs=()
zero="$(readlink -f "$0")"
zero_dir="${zero%/*}"
exec 3>&1

USBInstaller() {
    local block_device="$1" release="${UBUNTU_RELEASE:-18.04}" flavor="${UBUNTU_FLAVOR:-live-server}"
    local ubuntu_file
    ubuntu_file=$(FetchISO "$release" "$flavor")
    [ -n "$ubuntu_file" ]
    echo "Installing $ubuntu_file to $block_device"
    cleanup_devs+=("$block_device")
    UnmountBlockDeviceFilesystems "$block_device"
    mountpoint=$(MakeBootableBlockDevice "$block_device")
    cleanup_dirs+=("$mountpoint")
    DumpUbuntuOntoDevice "$mountpoint" "$ubuntu_file"
    echo "Syncing"
    sync
    exit 0
}

FetchISO() {
    set -e
    local release="$1" flavor="$2" sums_url
    sums_url=$(FetchSumsUrl "$release" "$flavor")
    [ -n "$sums_url" ]
    iso_url=$(GetISOURL "$sums_url" "$release" "$flavor")
    [ -n "$iso_url" ]
    cache_file="${zero_dir}/${iso_url##*/}"
    if ! CheckCachedFile "$cache_file" "$sums_url"; then
	rm -vf "$cache_file" 1>&3
	curl --location --fail --output "$cache_file" "$iso_url" 1>&3
	CheckCachedFile "$cache_file" "$sums_url" 1>&3
    fi
    echo "$cache_file"
}

FetchSumsUrl() {
    local release="$1" flavor="$2" sums_url sums_try_url
    local base_urls=(
	http://old-releases.ubuntu.com/releases/
	http://releases.ubuntu.com/
    )
    for base_url in "${base_urls[@]}"; do
	sums_try_url=$(TryToFetchSumsFile "$base_url" "$release" "$flavor")
	if [ -n "$sums_try_url" ]; then
	    sums_url="$sums_try_url"
	fi
    done
    [ -n "$sums_url" ]
    echo "$sums_url"
}

TryToFetchSumsFile() {
    local url="$1" release="$2" flavor="$3" regex sums_url
    sums_url="$url$release/SHA256SUMS"
    regex=$(CalcRegex "$release" "$flavor")
    if curl --silent --fail "$sums_url" | grep -E -q "$regex"; then
	echo "$sums_url"
    fi
}

CalcRegex() {
    local release="$1" flavor="$2" release_regex
    case "$release" in
	[1-9][0-9].[01][40].0)
	    release_regex="${release%.0}" ;;
	[1-9][0-9].[01][40])
	    release_regex="${release}(.[1-9])?" ;;
	*)
	    release_regex="${release}" ;;
    esac
    echo "\*ubuntu-$release_regex-$flavor.*\.iso$"
}

GetISOURL() {
    local sums_url="$1" release="$2" flavor="$3" sum_line
    regex=$(CalcRegex "$release" "$flavor")
    sum_line=$(curl --silent --fail "$sums_url" | grep -E "$regex")
    echo "${sums_url%/*}/${sum_line##*\*}"
}

CheckCachedFile() {
    local cache_file="$1" sums_url="$2"
    local shasum_file="${cache_file}.sha256"
    curl --silent --fail "$sums_url" |
	awk -v cache_file="${cache_file##*/}" -F\* '$2==cache_file' > "${shasum_file}"
    (cd "$zero_dir"; sha256sum --quiet --check "${shasum_file}" 1>&3)
}

UnmountBlockDeviceFilesystems() {
    local block_device="$1" mountpoint
    lsblk --noheadings --output MOUNTPOINT "$block_device" |
	while read -r mountpoint; do
	    if [ -n "$mountpoint" ]; then
		umount -f "$mountpoint"
	    fi
	done
}

MakeBootableBlockDevice() {
    local block_device="$1" block_device_partition="${1}1" wait
    dd if=/dev/zero of="${block_device}" seek=1 count=2047
    parted -a optimal "$block_device" mklabel msdos 1>&3
    parted -a optimal "$block_device" -- mkpart primary fat32 1M -1M 1>&3
    for wait in 1 2 3 4 5; do
	[ -r "$block_device_partition" ] && break
	: echo "$wait"
	sleep 1
    done
    mkfs.fat -F 32 "$block_device_partition" 1>&3
    local uuid
    uuid=$(lsblk --noheadings --output UUID "$block_device_partition")
    local mountpoint="/media/$uuid"
    mkdir -p "$mountpoint"
    mount "$block_device_partition" "$mountpoint"
    local boot="$mountpoint/boot" efi="$mountpoint/EFI"
    mkdir -p "$mountpoint/EFI"
    grub-install --no-floppy --boot-directory="$boot" --target=i386-pc "$block_device"
    grub-install --removable --boot-directory="$boot" --efi-directory="$efi" --target=x86_64-efi "$block_device"
    grub-install --removable --boot-directory="$boot" --efi-directory="$efi" --target=i386-efi "$block_device"
    echo "$mountpoint"
}

DumpUbuntuOntoDevice() {
    local mountpoint="$1" ubuntu_file="$2"
    7z x -o"$mountpoint" -aoa "$ubuntu_file"
}


Cleanup() {
    set +e -x
    local dev dir
    for dev in "${cleanup_devs[@]}"; do
	UnmountBlockDeviceFilesystems "$dev"
    done

    for dir in "${cleanup_dirs[@]}"; do
	rmdir "$dir"
    done
}

trap "Cleanup" EXIT
trap 'kill -INT $$' INT
trap 'kill -TERM $$' TERM
trap 'kill -QUIT $$' QUIT
USBInstaller "$@"
